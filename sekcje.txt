Vitest (Jest compatible test runner & assertion library, but also natively supports ES6 modules)
install: npm install --save-dev vitest
po instalacji należy dodać skrypt w package.json:
"scripts": {
  "test": "vitest --globals" (globals: you can then run 'it', 'expect' without imports)
or:       "vitest --run" (run once)
or:       "vitest" (enter watch mode)

sec3-5: BASIC TESTS, INTEGRATION TESTS:
(integration test - checks if the combination of funictions (other units, separately tested) is also valid)
-it()
-expect()
-describe() - organizowanie testów w zbiór (test suite) - opis której funkcji (unitu) dotyczą
-assertions:
--basic: toBe(value), toBeTypeOf(), toBeNaN(), toContain(), 
--arrays, objects in result: toEqual() 
--errors: toThrow(), .not  //toThrow - testujemy nie rezultat ale funkcję, która może rzucić błędem

sec6: TESTING ASYNC CODE, HOOKS:
-testing callbacks (expect with 'done' in try...catch)
-testing promises (return expect().resolves/rejects.toBe...)
-testing classes (toHaveProperty)
-hooks (beforeAll, beforeEach, afterAll, afterEach)
-paralelly running tests: it.concurrent('should....

sec.7: SPIES, MOCKS
-vi.fn() - creates an empty function that keep tracks of its execution (===jest.fn() in jest)
-vi.fn(()=>{...}) - spy with custom code (
-spy.mockImplementation, spy.mockImplementationOnce - adding custom code to existing spy
-.toBeCalled() (===toHaveBeenCalled()), .toBeCalledTimes(number), .toBeCalledWith(args)
-vi.mock('...') - automocking: podajemy nazwę ew. path modułu do zamockowania i wszystkie funkcje w module będą zastąpione spy'ami
-vi.mock('...', () => {return {...}) mocking only specific methods form the module
-__mocks__ folder - for all vi.mock()s: inside put files with names of the modules you want to mock

sec.8: MOCKS ADVANCED
-vi.stubGlobal('...', () => {}) - mocking global function, not impored from some module (like fetch)
-testing error message from reject
-rejects.toBeInstanceOf()
-podmiana stuba dla jednego testu: mockImplementationsOnce

